/*
Package sign GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package sign

import (
	context "context"

	jwk "github.com/octohelm/jwx/pkg/jwk"
)

func (p *JWTSigner) InjectContext(ctx context.Context) context.Context {
	return SignerInjectContext(ctx, p)
}

func (v *JWTSigner) Init(ctx context.Context) error {
	if value, ok := jwk.KeySetProviderFromContext(ctx); ok {
		v.keySetProvider = value
	}

	if err := v.beforeInit(ctx); err != nil {
		return err
	}
	if err := v.idgen.Init(ctx); err != nil {
		return err
	}

	return nil
}

func (p *JWTValidator) InjectContext(ctx context.Context) context.Context {
	ctx = ValidatorInjectContext(ctx, p.Validator)

	return ctx
}

func (v *JWTValidator) Init(ctx context.Context) error {
	if err := v.afterInit(ctx); err != nil {
		return err
	}

	return nil
}

type contextSigner struct{}

func SignerFromContext(ctx context.Context) (Signer, bool) {
	if v, ok := ctx.Value(contextSigner{}).(Signer); ok {
		return v, true
	}
	return nil, false
}

func SignerInjectContext(ctx context.Context, tpe Signer) context.Context {
	return context.WithValue(ctx, contextSigner{}, tpe)
}

type contextValidator struct{}

func ValidatorFromContext(ctx context.Context) (Validator, bool) {
	if v, ok := ctx.Value(contextValidator{}).(Validator); ok {
		return v, true
	}
	return nil, false
}

func ValidatorInjectContext(ctx context.Context, tpe Validator) context.Context {
	return context.WithValue(ctx, contextValidator{}, tpe)
}
