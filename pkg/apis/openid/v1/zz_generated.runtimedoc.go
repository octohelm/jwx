/*
Package v1 GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package v1

func (v *AuthorizationCodeGrant) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GrantType":
			return []string{
				"授权类型",
			}, true
		case "Code":
			return []string{
				"临时凭证 code",
			}, true
		case "RedirectUri":
			return []string{
				"重定向地址",
			}, true
		case "CodeVerifier":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.ClientAuth, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/",
	}, true
}

func (v *AuthorizationCodeRequest) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ResponseType":
			return []string{}, true
		case "ClientID":
			return []string{}, true
		case "RedirectURI":
			return []string{}, true
		case "Scope":
			return []string{}, true
		case "State":
			return []string{}, true
		case "CodeChallenge":
			return []string{}, true
		case "CodeChallengeMethod":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/authorization/the-authorization-request/",
	}, true
}

func (v *Binding) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Subject":
			return []string{}, true
		case "Provider":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ClientAuth) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ClientID":
			return []string{
				"Client ID",
			}, true
		case "ClientSecret":
			return []string{
				"Client Secret",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ClientCredentialsGrant) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GrantType":
			return []string{
				"授权类型",
			}, true
		case "Scope":
			return []string{
				"授权范围",
			}, true

		}
		if doc, ok := runtimeDoc(&v.ClientAuth, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/",
	}, true
}

func (v *Configuration) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Issuer":
			return []string{}, true
		case "JwksUri":
			return []string{}, true
		case "TokenEndpoint":
			return []string{}, true
		case "UserinfoEndpoint":
			return []string{}, true
		case "AuthorizationEndpoint":
			return []string{}, true
		case "IdTokenSigningAlgValuesSupported":
			return []string{}, true
		case "SubjectTypesSupported":
			return []string{}, true
		case "TokenEndpointAuthMethodsSupported":
			return []string{}, true
		case "GrantTypesSupported":
			return []string{}, true
		case "ResponseTypesSupported":
			return []string{}, true
		case "ScopesSupported":
			return []string{}, true
		case "ClaimsSupported":
			return []string{}, true

		}

		return nil, false
	}
	return []string{
		"https://openid.net/specs/openid-connect-discovery-1_0.html",
	}, true
}

func (v *ConfigurationWithExternalProviders) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ExternalProviders":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.Configuration, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrAccountAlreadyLogout) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrAdministratorRequired) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrBadAuthorizationCodeGrant) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidCaptcha) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidClientID) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidOpenidConnect) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidToken) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidUserOrPassword) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrOpenidBindingConflict) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Provider":
			return []string{}, true
		case "Subject":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrUnsupportedGrantType) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GrantType":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrWrongPasswordTooManyTimes) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Wait":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *GrantPayload) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.Grant, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Jwk) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Kty":
			return []string{
				"密钥类型",
			}, true
		case "Alg":
			return []string{
				"密钥算法类型",
			}, true
		case "Kid":
			return []string{
				"密钥 ID",
			}, true
		case "Use":
			return []string{
				"用途",
				"sig （签名和验证）或 enc (加密和解密)",
			}, true
		case "E":
			return []string{
				"RSA 公钥的模数",
			}, true
		case "N":
			return []string{
				"RSA 公钥的指数",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Jwks) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Keys":
			return []string{
				"密钥列表",
			}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *PasswordGrant) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GrantType":
			return []string{
				"授权类型",
			}, true
		case "Username":
			return []string{
				"用户标识",
				"可以是 用户名/手机/邮箱等",
			}, true
		case "Password":
			return []string{
				"密码",
			}, true
		case "Scope":
			return []string{
				"授权范围",
			}, true

		}
		if doc, ok := runtimeDoc(&v.ClientAuth, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/access-tokens/password-grant/",
	}, true
}

func (*ProviderCode) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *ProviderMeta) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Code":
			return []string{
				"标识",
			}, true
		case "Name":
			return []string{
				"名称",
			}, true
		case "AuthorizationEndpoint":
			return []string{
				"登录入口",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *RefreshTokenGrant) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "GrantType":
			return []string{
				"授权类型",
			}, true
		case "RefreshToken":
			return []string{
				"刷新 Token",
			}, true
		case "Scope":
			return []string{
				"授权范围",
			}, true

		}
		if doc, ok := runtimeDoc(&v.ClientAuth, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/access-tokens/refreshing-access-tokens/",
	}, true
}

func (v *Token) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "TokenType":
			return []string{
				"Token 类型",
			}, true
		case "ExpiresIn":
			return []string{
				"过期时间（单位：秒）",
			}, true
		case "AccessToken":
			return []string{
				"访问凭证",
			}, true
		case "RefreshToken":
			return []string{
				"刷新凭证",
			}, true
		case "Scope":
			return []string{
				"凭证范围",
				"预留，暂时无实现",
			}, true

		}

		return nil, false
	}
	return []string{
		"https://www.oauth.com/oauth2-servers/access-tokens/access-token-response/",
	}, true
}

func (v *UserInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Sub":
			return []string{
				"用户标识",
			}, true
		case "Name":
			return []string{
				"姓名",
			}, true
		case "Nickname":
			return []string{
				"昵称",
			}, true
		case "PreferredUsername":
			return []string{
				"自定义用户名",
			}, true
		case "Email":
			return []string{
				"邮箱",
			}, true
		case "EmailVerified":
			return []string{
				"已验证邮箱",
			}, true
		case "PhoneNumber":
			return []string{
				"手机号",
			}, true
		case "PhoneNumberVerified":
			return []string{
				"已验证手机号",
			}, true
		case "Extra":
			return []string{
				"其他信息",
			}, true

		}

		return nil, false
	}
	return []string{
		"https://openid.net/specs/openid-connect-core-1_0.html#UserInfoResponse",
	}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
