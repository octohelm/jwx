/*
Package http GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package http

func (*ContentType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *ErrInvalidEncryptedData) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidKey) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrInvalidProtected) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Reason":
			return []string{}, true
		case "Value":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ErrUnsupportedEncryptionMethod) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Enc":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *MiddlewareProvider) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Provider":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *TransportProvider) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Disabled":
			return []string{}, true
		case "EncryptProvider":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
